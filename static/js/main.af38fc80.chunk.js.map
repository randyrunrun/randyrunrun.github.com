{"version":3,"sources":["helpers/utilities.js","components/Header.js","redux/actions.js","components/PostList.js","components/PostListContainer.js","components/Post.js","components/PostContainer.js","components/Editer.js","redux/reducers.js","redux/store.js","components/App.js","index.js"],"names":["fullYear","Header","_handleClick","props","history","goBack","length","push","isPost","this","location","pathname","indexOf","title","iconElementLeft","onClick","showMenuIconButton","style","textAlign","PureComponent","HeaderWithRouter","withRouter","capitalize","string","toUpperCase","slice","capitalizeWords","words","wordsArray","split","reduce","accumulatedWords","word","truncate","text","limit","substring","lastSpaceIndex","lastIndexOf","replace","faker","date","past","recent","lorem","paragraph","paragraphs","slug","uuid","random","FETCH_POSTS","RECEIVE_POSTS","recentDates","Array","fill","map","sort","date1","date2","receivePosts","count","options","posts","summary","id","content","pop","type","PostList","fetchPosts","isLoading","index","List","to","textDecoration","lineHeight","dateTime","moment","fromNow","src","onEnter","size","thickness","PostListContainer","connect","state","isFetching","items","dispatch","setTimeout","wrapper","contentStyle","minHeight","headerHeight","paperStyle","padding","Post","_renderProgress","_renderPost","post","zDepth","fetchPost","Date","getFullYear","PostContainer","ownProps","match","params","find","Editer","editorState","BraftEditor","createEditorState","outputHTML","handleChange","setState","toRAW","setEditorContentAsync","isLivinig","className","value","onChange","React","Component","initialState","combineReducers","action","Object","assign","concat","createStore","rootReducer","applyMiddleware","thunkMiddleware","createLogger","App","store","exact","path","component","render","_redirectToHome","COS","require","ReactDOM","StrictMode","document","getElementById","cos","SecretId","SecretKey","putObject","Bucket","Region","Key","Body","JSON","stringify","a","b","onProgress","progressData","console","log","err","data","getObject"],"mappings":"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","file":"static/js/main.af38fc80.chunk.js","sourcesContent":["/**\n * Capitalizes string.\n *\n * @param  {String} string\n * @return {String}\n */\n const capitalize = string => {\n    if (!string) return string;\n    return string[0].toUpperCase() + string.slice(1);\n  };\n  \n  /**\n   * Capitalizes words.\n   *\n   * @param  {String} words\n   * @return {String}\n   */\n  export const capitalizeWords = words => {\n    const wordsArray = words.split(' ');\n  \n    // single word\n    if (wordsArray.length === 1) {\n      return capitalize(words);\n    }\n  \n    // multiple words\n    return wordsArray.reduce((accumulatedWords, word) => {\n      // first word\n      if (!accumulatedWords) return capitalize(word);\n  \n      // empty array item\n      if (!word) return accumulatedWords;\n  \n      // concatenate word\n      return `${accumulatedWords} ${capitalize(word)}`;\n    }, '');\n  };\n  \n  let fullYear;\n  \n  /**\n   * Gets full year.\n   *\n   * @return {Number}\n   */\n  export const getFullYear = () => {\n    if (!fullYear) {\n      fullYear = new Date().getFullYear();\n    }\n    return fullYear;\n  };\n  \n  /**\n   * Truncates text.\n   *\n   * @param  {String} text\n   * @param  {Number} [limit]\n   * @return {String}\n   */\n  export const truncate = (text, limit) => {\n    if (typeof text !== 'string') return '';\n  \n    if (text.length > limit) {\n      // truncate string based on limit\n      text = text.substring(0, limit);\n    }\n  \n    // truncate to last whitespace if applicable\n    const lastSpaceIndex = text.lastIndexOf(' ');\n    if (lastSpaceIndex !== -1) {\n      text = text.substring(0, lastSpaceIndex);\n    }\n  \n    // trim trailing whitespace/periods\n    return text.replace(/[\\s.]+$/g, '');\n  };\n  ","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport AppBar from 'material-ui/AppBar';\nimport IconButton from 'material-ui/IconButton';\nimport ArrowBack from 'material-ui/svg-icons/navigation/arrow-back';\n\nexport const height = 64;\n\nexport class Header extends PureComponent {\n  static propTypes = {\n    location: PropTypes.shape({\n      pathname: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({\n      goBack: PropTypes.func,\n      length: PropTypes.number,\n      push: PropTypes.func,\n    }).isRequired,\n  };\n\n  _handleClick = () => {\n    const { history: { goBack, length, push } } = this.props;\n    length < 4 ? push('/') : goBack();\n  };\n\n  render() {\n    const { location: { pathname } } = this.props;\n    const isPost = pathname.indexOf('/posts/') !== -1;\n\n    return (\n      <AppBar\n        title=\"Randy's House\"\n        iconElementLeft={\n          isPost ? (\n            <IconButton onClick={this._handleClick}>\n              <ArrowBack />\n            </IconButton>\n          ) : null\n        }\n        showMenuIconButton={isPost}\n        style={{ textAlign: 'center' }}\n      />\n    );\n  }\n}\n\nconst HeaderWithRouter = withRouter(Header);\nexport default HeaderWithRouter;\n","import faker from 'faker';\nimport { capitalizeWords } from '../helpers/utilities';\n\nconst {\n  date: { past, recent },\n  lorem: { paragraph, paragraphs, slug, words },\n  random: { uuid },\n} = faker;\n\n// action constants\nexport const FETCH_POSTS = 'FETCH_POSTS';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\n\n// generate a list of recent dates sorted in ascending order\nconst recentDates = Array(50)\n  .fill()\n  .map(() => recent())\n  .sort((date1, date2) => {\n    if (date1 > date2) return 1;\n    if (date1 < date2) return -1;\n    return 0;\n  });\n\n/**\n * Receives posts (mocked by faker).\n *\n * @param {Number} [count=1]\n * @param {Object} [options]\n */\nexport const receivePosts = (count = 1, options = {}) => {\n  const posts = Array(count)\n    .fill()\n    .map(() => {\n      const summary = paragraph();\n      return {\n        id: options.id || uuid().split('-')[0],\n        title: capitalizeWords(words()),\n        summary,\n        content: `${summary}\\n${paragraphs()}`,\n        date: recentDates.pop() || past(),\n        slug: options.slug || slug(),\n      };\n    });\n\n  return {\n    type: RECEIVE_POSTS,\n    posts,\n  };\n};\n\nconst POST_COUNT = 10;\n\n/**\n * Fetches 10 posts.\n */\nexport const fetchPosts = () => {\n  return dispatch => {\n    // emulate api request\n    setTimeout(() => dispatch(receivePosts(POST_COUNT)), 1000);\n  };\n};\n\n/**\n * Fetches post.\n *\n * @param {String} id\n * @param {String} slug\n */\nexport const fetchPost = (id, slug) => {\n  return dispatch => {\n    // emulate api request\n    setTimeout(() => dispatch(receivePosts(1, { id, slug })), 1000);\n  };\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Waypoint from 'react-waypoint';\nimport moment from 'moment';\nimport CircularProgress from 'material-ui/CircularProgress';\nimport Divider from 'material-ui/Divider';\nimport { List, ListItem } from 'material-ui/List';\nimport { truncate } from '../helpers/utilities';\nimport { Button } from 'antd';\nimport './App.css';\n\nexport const TRUNCATION_LIMIT = 150;\n\nexport default class PostList extends PureComponent {\n  static propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool.isRequired,\n    posts: PropTypes.arrayOf(\n      PropTypes.shape({\n        date: PropTypes.instanceOf(Date),\n        id: PropTypes.string,\n        slug: PropTypes.string,\n        summary: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n  };\n\n  render() {\n    const { fetchPosts, isLoading, posts } = this.props;\n\n    return (\n      <div>\n        <Button type=\"primary\">Button</Button>\n        {/* posts */}\n        {posts.map(({ id, title, summary, date, slug }, index) => (\n          <List key={index}>\n            <Link\n              to={`/posts/${id}/${slug}`}\n              style={{ textDecoration: 'none' }}\n            >\n              <ListItem>\n                <article style={{ lineHeight: 1.35 }}>\n                  <h2>\n                    <strong>{title}</strong>\n                  </h2>\n                  <p>{truncate(summary, TRUNCATION_LIMIT)}&hellip;</p>\n                  <div style={{ textAlign: 'right' }}>\n                    <time dateTime={date}>{moment(date).fromNow()}</time>\n                  </div>\n                  <img src=\"https://reading-1259170587.cos.ap-chengdu.myqcloud.com/resource/logo.png\"></img>\n                </article>\n              </ListItem>\n            </Link>\n            <Divider />\n          </List>\n        ))}\n\n        {/* waypoint */}\n        {!isLoading && <Waypoint onEnter={fetchPosts} />}\n        <br />\n        <br />\n\n        {/* progress */}\n        <div style={{ textAlign: 'center' }}>\n          <CircularProgress size={80} thickness={6} />\n        </div>\n        <br />\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { fetchPosts } from '../redux/actions';\nimport PostList from './PostList';\n\nconst mapStateToProps = state => {\n  const { posts: { isFetching, items } } = state;\n  return {\n    isLoading: isFetching,\n    posts: items,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPosts: () => dispatch(fetchPosts()),\n});\n\nconst wrapper = connect(mapStateToProps, mapDispatchToProps);\nconst PostListContainer = wrapper(PostList);\nexport default PostListContainer;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport CircularProgress from 'material-ui/CircularProgress';\nimport Divider from 'material-ui/Divider';\nimport Paper from 'material-ui/Paper';\nimport { getFullYear } from '../helpers/utilities';\nimport { height as headerHeight } from './Header';\n\nconst footerHeight = 50;\nconst contentStyle = {\n  minHeight: `calc(100vh - ${headerHeight + footerHeight}px)`,\n};\nconst paperStyle = { padding: 16 };\n\nexport default class Post extends PureComponent {\n  static propTypes = {\n    fetchPost: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    post: PropTypes.shape({\n      content: PropTypes.string,\n      date: PropTypes.instanceOf(Date),\n      title: PropTypes.string,\n    }),\n    slug: PropTypes.string.isRequired,\n  };\n\n  componentDidMount() {\n    const { fetchPost, id, post, slug } = this.props;\n    if (!post) {\n      fetchPost(id, slug);\n    }\n  }\n\n  _renderProgress = () => {\n    return (\n      <div style={{ ...paperStyle, textAlign: 'center' }}>\n        <br />\n        <CircularProgress size={80} thickness={6} />\n      </div>\n    );\n  };\n\n  _renderPost = () => {\n    const { title, date, content } = this.props.post;\n    return (\n      <Paper zDepth={0} style={paperStyle}>\n        <article>\n          <h1>{title}</h1>\n          <time dateTime={date}>{moment(date).fromNow()}</time>\n          <br />\n          <br />\n          <Divider />\n          {content &&\n            content\n              .split('\\n')\n              .map((paragraph, index) => <p key={index}>{paragraph}</p>)}\n        </article>\n      </Paper>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={contentStyle}>\n          {this.props.post ? this._renderPost() : this._renderProgress()}\n        </div>\n        <Divider />\n        <Paper zDepth={0} style={paperStyle}>\n          <footer>Copyright {getFullYear()} Acme Corp.</footer>\n        </Paper>\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { find } from 'lodash';\nimport { fetchPost } from '../redux/actions';\n\nimport Post from './Post';\n\nconst mapStateToProps = (state, ownProps) => {\n  const { match: { params: { id, slug } } } = ownProps;\n  const post = find(state.posts.items, { id });\n  return { id, post, slug };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPost: (id, slug) => dispatch(fetchPost(id, slug)),\n});\n\nconst wrapper = connect(mapStateToProps, mapDispatchToProps);\nconst PostContainer = wrapper(Post);\nexport default PostContainer;","import 'braft-editor/dist/index.css'\nimport React from 'react'\nimport BraftEditor from 'braft-editor'\n\nexport default class Editer extends React.Component {\n\n  state = {\n    editorState: BraftEditor.createEditorState('<p>Hello <b>World!</b></p>'), // 设置编辑器初始内容\n    outputHTML: '<p></p>'\n  }\n\n  componentDidMount () {\n    this.isLivinig = true\n    // 3秒后更改编辑器内容\n    setTimeout(this.setEditorContentAsync, 3000)\n  }\n\n  componentWillUnmount () {\n    this.isLivinig = false\n  }\n\n  handleChange = (editorState) => {\n    this.setState({\n      editorState: editorState,\n      outputHTML: editorState.toRAW()\n    })\n  }\n\n  setEditorContentAsync = () => {\n    this.isLivinig && this.setState({\n      editorState: BraftEditor.createEditorState('<p>你好，<b>世界!</b><p>')\n    })\n  }\n\n  render () {\n\n    const { editorState, outputHTML } = this.state\n\n    return (\n      <div>\n        <div className=\"editor-wrapper\">\n          <BraftEditor\n            value={editorState}\n            onChange={this.handleChange}\n          />\n        </div>\n        <h5>输出内容</h5>\n        <div className=\"output-content\">{outputHTML}</div>\n      </div>\n    )\n\n  }\n\n}","import { combineReducers } from 'redux';\nimport { FETCH_POSTS, RECEIVE_POSTS } from './actions';\n\nconst initialState = {\n  isFetching: false,\n  items: [],\n};\n\nexport const posts = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        items: state.items.concat(action.posts),\n      });\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({ posts });\n","import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './reducers';\n\nexport default createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, createLogger()),\n);\n","import React, { PureComponent } from 'react';\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Header from './Header';\nimport PostListContainer from './PostListContainer';\nimport PostContainer from './PostContainer';\nimport Editer from './Editer';\nimport store from '../redux/store';\n\nexport default class App extends PureComponent {\n  _redirectToHome() {\n    return <Redirect to=\"/\" />;\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <MuiThemeProvider>\n          <Router>\n            <div>\n              <Header />\n\n              {/* content */}\n              <Switch>\n                <Route exact path=\"/\" component={PostListContainer} />\n                <Route path=\"/posts/:id/:slug\" component={PostContainer} />\n                <Route exact path=\"/edit\" component={Editer} />\n                {/* catch-all redirects to home */}\n                <Route render={this._redirectToHome} />\n              </Switch>\n            </div>\n          </Router>\n        </MuiThemeProvider>\n      </Provider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nvar COS = require('cos-js-sdk-v5');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nvar cos = new COS({\n  SecretId: 'AKIDGUYXuBcH5lGdM748OVYSAnX8ZO2TN07B',\n  SecretKey: '2tY1LVYRqDiCYkneLuJ9oKtbKwPkPtFW',\n});\n\ncos.putObject({\n  Bucket: 'reading-1259170587', /* 必须 */\n  Region: 'ap-chengdu',     /* 存储桶所在地域，必须字段 */\n  Key: 'post/postClass',              /* 必须 */\n  Body: JSON.stringify({a:1,b:2}), // 上传文件对象\n  onProgress: function(progressData) {\n      console.log(JSON.stringify(progressData));\n  }\n}, function(err, data) {\n  console.log(err || data);\n});\n\ncos.getObject({\n  Bucket: 'reading-1259170587', /* 必须 */\n  Region: 'ap-chengdu',     /* 存储桶所在地域，必须字段 */\n  Key: 'post/postClass',           /* 非必须 */\n}, function(err, data) {\n  console.log(err || data.Body);\n});"],"sourceRoot":""}